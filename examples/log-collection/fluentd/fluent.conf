<system>
  # NOTE: For handling unrecoverable chunks
  #       ref. https://docs.fluentd.org/buffer#handling-unrecoverable-errors
  root_dir     "#{ENV.fetch('FLUENTD_BUFFER_DIR')}"
  worker       "#{ENV.fetch('FLUENTD_NUM_WORKERS', 1)}"
  rpc_endpoint "0.0.0.0:#{ENV.fetch('FLUENTD_RPC_PORT', 24444)}"
</system>

<source>
  @type monitor_agent
  bind 0.0.0.0
  port "#{ENV.fetch('FLUENTD_MONITOR_PORT', 24220)}"
</source>

<source>
  # NOTE: To reduce memory usage.
  @type gc
  interval 5
</source>

<worker 0>
  # ref. https://docs.fluentd.org/deployment/multi-process-workers#less-than-worker-greater-than-directive
  <source>
    @type                        tail
    @id                          in_tail
    tag                          "raw.**"
    path                         "#{File.join(ENV.fetch('FLUENTD_EVENT_LOG_DIR'), '**')}"
    read_from_head               true
    follow_inodes                true
    refresh_interval             "#{ENV.fetch('FLUENTD_IN_TAIL_REFRESH_INTERVAL')}"
    encoding                     UTF-8
    pos_file                     "#{File.join(ENV.fetch('FLUENTD_BUFFER_DIR'), 'event.log.pos')}"
    pos_file_compaction_interval 24h
    @label                       @event_log
    <parse>
      @type json
    </parse>
  </source>
</worker>

<label @event_log>
  <filter raw.**>
    @type         record_modifier
    prepare_value @debug_info = {'k8s_pod_name': ENV.fetch('POD_NAME'),'k8s_pod_namespace': ENV.fetch('POD_NAMESPACE'),'k8s_pod_ip': ENV.fetch('POD_IP'),'k8s_node_name': ENV.fetch('NODE_NAME'), 'env': ENV.fetch('ENV')}
    <record>
      debug ${@debug_info}
    </record>
  </filter>

  <filter raw.**>
    @type flowcounter_simple
    unit second
    comment after_record_modifier
  </filter>

  <filter raw.**>
    @type flowcounter_simple
    unit minute
    comment after_record_modifier
  </filter>

  <match raw.**>
    @type             gcloud_pubsub
    @id               out_gcloud_pubsub

    project           "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_PROJECT')}"
    topic             "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_TOPIC')}"
    endpoint          "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_ENDPOINT')}"
    dest_project      "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_DEST_PROJECT')}"
    key               "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_KEY')}"
    autocreate_topic  false

    max_messages      "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_MAX_MESSAGES',     1000)}"
    max_total_size    "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_MAX_TOTAL_SIZE',   9800000)}"
    max_message_size  "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_MAX_MESSAGE_SIZE', 4000000)}"
    compression       "#{ENV.fetch('FLUENTD_OUT_GCLOUD_PUBSUB_COMPRESSION',      'text')}"

    <format>
      @type json
    </format>
    <buffer>
      @type                     file
      flush_mode                interval
      flush_interval            "#{ENV.fetch('FLUENTD_BUF_FILE_FLUSH_INTERVAL',     '30s')}"
      flush_at_shutdown         "#{ENV.fetch('FLUENTD_BUF_FILE_FLUSH_AT_SHUTDOWN',  true)}"
      total_limit_size          "#{ENV.fetch('FLUENTD_BUF_FILE_TOTAL_LIMIT_SIZE',   '1TB')}"
      retry_type                "#{ENV.fetch('FLUENTD_BUF_FILE_RETRY_TYPE',         'exponential_backoff')}"
      retry_max_interval        "#{ENV.fetch('FLUENTD_BUF_FILE_RETRY_MAX_INTERVAL', '300s')}"
      retry_forever             "#{ENV.fetch('FLUENTD_BUF_FILE_RETRY_FOREVER',      true)}"
      compress                  text
    </buffer>
  </match>
</label>

@include conf.d/*.conf
